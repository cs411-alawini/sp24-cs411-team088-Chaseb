Conceptual Design (UML)
For the UML, we will use five entities based on your description: Users, CarModels, Sales, Listings, and an additional entity CarTeams for users to build up their own teams. Here are the assumptions and cardinality descriptions:
1. Users: Represents the accounts on the platform.
· Description: Each user can list multiple cars for sale, assemble a unique car team (become the captain of the team), and view multiple historical sales records.
2. CarModels: Contains detailed static information about car models.
· Description: This entity stores general information about car models that isn't specific to a sale instance. It's modeled separately from Sales and Listings to avoid redundancy and ensure that details like brand, model, engine, etc., are stored in one place.
3. Sales: Tracks historical sales data.
· Description: Each record is a past sale instance, linked to CarModels for detailed specifications and to User if we want to track which user sold the car. It's assumed that each sale record is unique.
4. Listings: Represents cars currently listed for sale.
· Description: Similar to Sales, but for ongoing listings. Each listing is linked to CarModels for car details and Users for the seller's information.
5. CarTeams: Users could build up a car team between different cars.
· Description: This entity allows users to build different teams based on different models of cars, and users could find the cars in CarModels entities.
Relationships:
· A one-to-many relationship between Users and Sales/Listings/CarTeams, as a user can have multiple sales, listings, and comparisons but each sale, listing, or comparison is associated with one user.
· A many-to-many relationship between CarModels and CarTeams through an associative entity, as each comparison can involve multiple cars, and each car can be involved in multiple comparisons.
· A one-to-many relationship between CarModels and both Sales and Listings, as each car instance in these entities refers to a single CarModels entity, but each CarModels can be referred to by multiple sales or listings.
A one-to-one relationship between Users and CarTeams, once the user regressed, he/she could only build one team with one or multiple car models.
Logical Design (Relational Schema)
1. Users(UserID: INT [PK], Username: VARCHAR(255), Email: VARCHAR(255), Password: VARCHAR(255))
2. CarModels(CarID: INT [PK], TeamID: INT [FK to CarTeams.TeamID], Brand: VARCHAR(255), Model: VARCHAR(255), Engine: VARCHAR(255), Transmission: VARCHAR(255), Drivetrain: VARCHAR(255), FuelType: VARCHAR(255), MPG: DECIMAL)
3. Sales(SaleID: INT [PK], CarID: INT [FK to CarModels.CarID], UserID: INT [FK to Users.UserID], Company: VARCHAR(255), YearOfPurchase: YEAR, KMsDriven: INT, RegistrationCity: VARCHAR(255), Condition: VARCHAR(255), SellerLocation: VARCHAR(255), Features: TEXT, ImageURLs: TEXT, PriceSold: DECIMAL, YearSold: YEAR, Mileage: INT, Trim: VARCHAR(255), Year: YEAR, ZipCode: VARCHAR(255))
4. Listings(ListingID: INT [PK], CarID: INT [FK to CarModels.CarID], UserID: INT [FK to Users.UserID], Company: VARCHAR(255), YearOfPurchase: YEAR, KMsDriven: INT, ListingPrice: DECIMAL, RegistrationCity: VARCHAR(255), Condition: VARCHAR(255), SellerLocation: VARCHAR(255), Features: TEXT, ImageURLs: TEXT, Mileage: INT, Trim: VARCHAR(255), Year: YEAR, ZipCode: VARCHAR(255))
5. CarTeams(TeamID: INT [PK], UserID: INT [FK to Users.UserID], AssembleDate: INT)
Normalization:
· The schema aims to be in the Third Normal Form (3NF) by ensuring that all the fields are atomic, only storing information relevant to the entity, and there is no transitive dependency.
· Chose 3NF over BCNF due to its balance between strict normalization and practical usability, considering that BCNF can sometimes result in excessive table decomposition which might not be necessary for this application context.
 
 

Entities and Their Attributes:
1. Users
· Attributes: UserID (PK), Username, Email, Password
2. CarModels
· Attributes: CarID (PK), TeamID(FK), Brand, Model, Engine, Transmission, Drivetrain, FuelType, MPG
3. Sales
· Attributes: SaleID (PK), CarID (FK), UserID (FK), Company, YearOfPurchase, KMsDriven, RegistrationCity, Condition, SellerLocation, Features, ImageURLs, PriceSold, YearSold, Mileage, Trim, Year, ZipCode
4. Listings
· Attributes: ListingID (PK), CarID (FK), UserID (FK), Company, YearOfPurchase, KMsDriven, ListingPrice, RegistrationCity, Condition, SellerLocation, Features, ImageURLs, Mileage, Trim, Year, ZipCode
5. CarTeam
· Attributes: TeamID (PK), UserID(FK), AssembleDate
Relationships:
· Users to Sales: One-to-Many (A user can sell multiple cars, but each sale record is associated with one user)
· Users to Listings: One-to-Many (A user can have multiple current listings)
· Users to CarTeams: One-to-One (A user can assemble only one team)
· CarModels to Sales: One-to-Many (Multiple sales records can refer to the same car model)
· CarModels to Listings: One-to-Many (Multiple listings can refer to the same car model)
· CarTeams to CarModels : one-to-many(A team can involve one or more different car models)
Steps to Create the UML:
1. Draw Entities: Start by drawing five rectangles, each representing one of the entities: User, CarModels, Sales, Listings, and CarTeams.
2. Add Attributes: Inside each entity rectangle, list down all the attributes it has. Make sure to underline primary keys (PK) and denote foreign keys (FK) appropriately.
3. Draw Relationships: Connect the entities with lines to represent relationships. Add a diamond shape along the line if you want to clearly denote the relationship name or type.
4. Denote Cardinalities: At each end of the relationship lines, denote the cardinality (one-to-many, many-to-many) using the appropriate symbols (1, N, M).
5. Add Associative Entities if Needed: For the many-to-many relationship (CarModels to CarTeams), you might need to draw an associative entity or simply show that CarTeams has foreign keys referring back to CarModels.
 
